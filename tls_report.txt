
                                        TASK 2: SSL/TLS in HTTPS – Analysis Report


Author: Mariam Khutsishvili
Date: 10/31/2025
Target Site: github.com

1. Objective

The purpose of this task is to analyze how HTTPS uses TLS to secure communication.
Using Wireshark and OpenSSL, the TLS handshake between my computer and github.com was captured and reviewed.


2. OpenSSL Test Summary

Command used:
openssl s_client -connect github.com:443 -servername github.com -showcerts


Results:

Protocol: TLSv1.3
Cipher Suite: TLS_AES_128_GCM_SHA256
Server Public Key: EC 256-bit (prime256v1)
Peer Signature: ecdsa_secp256r1_sha256
Ephemeral Key Exchange: X25519 (Perfect Forward Secrecy)
Certificate Chain: 3 certificates
Leaf: CN=github.com
Intermediate: Sectigo ECC Domain Validation Secure Server CA
Root: USERTrust ECC Certification Authority
Validity: Feb 5, 2025 → Feb 5, 2026
Verification Code: 20 (unable to get local issuer certificate — due to missing CA bundle on Windows)



3. Certificate Details

Subject: CN=github.com
Issuer: Sectigo ECC Domain Validation Secure Server CA
Public Key Algorithm: ECDSA (prime256v1)
Signature Algorithm: ecdsa-with-SHA256
Validity:

Not Before: Feb 5 00:00:00 2025 GMT

Not After: Feb 5 23:59:59 2026 GMT
Extended Key Usage: TLS Web Server Authentication (serverAuth)
SAN: github.com, www.github.com




4. Wireshark Packet Analysis

Filter used: tcp.port == 443
Captured key handshake messages:
ClientHello: Advertises supported TLS versions (1.3, 1.2), cipher suites, extensions (SNI=github.com).
ServerHello: Server selects TLSv1.3 and cipher suite TLS_AES_128_GCM_SHA256.
Encrypted Handshake Message: Certificate and key exchange are encrypted (TLS 1.3 feature).
Application Data: After handshake, all traffic is encrypted with AES-128-GCM.



5. TLS Security Mechanisms

Encryption: Protects confidentiality of data in transit.
Integrity: AES-GCM provides authenticated encryption to detect tampering.
Authentication: Server proves its identity via a valid certificate chain signed by a trusted CA.
Perfect Forward Secrecy (PFS): Ephemeral key exchange (X25519) ensures past sessions remain secure even if long-term keys are compromised.


6. HTTPS Explanation

HTTPS = HTTP + TLS.
TLS handshake establishes an encrypted and authenticated channel.
After handshake, HTTP messages are transmitted securely over this encrypted tunnel.
This prevents eavesdropping, tampering, and impersonation.




7. Protection Against Man-in-the-Middle (MITM) Attacks

TLS protects communication from interception and modification through multiple security mechanisms:

7.1 Authentication:
During the handshake, the server provides a digital certificate issued by a trusted Certificate Authority (CA).
The client verifies the certificate’s authenticity and ensures it matches the intended domain, preventing attackers from posing as the legitimate server.

7.2 Encryption:
After the handshake, all exchanged data is encrypted using symmetric algorithms (such as AES),
making it unreadable to anyone who intercepts the network traffic.

7.3 Integrity Protection:
Each TLS record includes a Message Authentication Code (MAC) or authentication tag (in AES-GCM),
ensuring that no data can be modified without detection.

7.4 Perfect Forward Secrecy (PFS):
Ephemeral key exchange (e.g., X25519) ensures that even if the server’s long-term private key is compromised in the future,
previously captured sessions cannot be decrypted.




8. TLS Application in Websites

TLS is the security layer that protects all modern websites using HTTPS.
It ensures that communication between users and web servers is encrypted, authenticated, and tamper-proof.
Typical applications include:

Secure login and authentication (e.g., online banking, email, e-commerce).

Protecting personal data entered into forms.

Enabling trust indicators such as the HTTPS padlock icon in browsers.
Without TLS, attackers could intercept or modify data exchanged over the Internet.



9. Conclusion

The analysis confirmed that github.com uses modern and secure TLS configuration:
TLSv1.3 with AES-128-GCM, ECDSA certificates, and X25519 key exchange — ensuring confidentiality, integrity, and authentication for HTTPS connections.